// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    voices        Voice[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// model Voice {
//     id            String    @id @default(cuid())
//     userId       String
//     xHandle      String
//     voiceConfig  String
//     user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model Voice {
  id           String   @id @default(uuid())
  userId       String
  x_handle     String?
  storage_url  String?  // manifest/corpus URL (Supabase)
  positioning  String?  @db.Text

  // JSON fields
  tone         Json?    // structured JSON (e.g., {style:"direct", knobs:{...}})
  voice_config Json?   // stores pillars, guardrails, influencers, context as per your spec

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

}